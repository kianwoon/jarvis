{
  "env": {
    "NODE_OPTIONS": "--max-old-space-size=16384 --expose-gc",
    "CLAUDE_AUDIO_NOTIFICATIONS": "true"
  },
  "permissions": {
    "allow": [
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d llm_platform -c \"SELECT*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(rg:*)",
      "Bash(awk:*)",
      "Bash(echo:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(wc:*)",
      "Bash(git status)",
      "Bash(git log:*)",
      "Bash(git show:*)",
      "Bash(git diff:*)",
      "Bash(git branch)",
      "Bash(git remote -v)",
      "Bash(lsof:*)",
      "Bash(top:*)",
      "Bash(log show:*)",
      "Bash(ps:*)",
      "Bash(docker logs:*)",
      "Bash(docker inspect:*)",
      "Bash(docker ps:*)",
      "Bash(docker-compose logs:*)",
      "Bash(npm ls:*)",
      "Bash(npm outdated)",
      "Bash(npm list:*)",
      "Bash(npm view:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npx tsc --noEmit:*)",
      "Bash(node test_table_fix.js)",
      "Bash(node --check:*)",
      "Bash(python -m py_compile:*)",
      "Bash(curl -s:*)",
      "Bash(time curl:*)",
      "Bash(redis-cli GET:*)",
      "Bash(redis-cli INFO:*)",
      "Bash(redis-cli KEYS:*)",
      "Bash(redis-cli EXISTS:*)",
      "Bash(redis-cli TYPE:*)",
      "Bash(redis-cli SET:*)",
      "Bash(redis-cli DEL:*)",
      "Bash(redis-cli FLUSHALL)",
      "Bash(redis-cli FLUSHDB)",
      "Bash(redis-cli:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(chmod:*)",
      "Bash(rm ~/Downloads/*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git restore:*)",
      "Bash(npm ci)",
      "Bash(npm run build:*)",
      "Bash(npm run:*)",
      "Bash(node:*)",
      "Bash(python:*)",
      "Bash(timeout:*)",
      "Bash(gtimeout:*)",
      "Bash(diff:*)",
      "Bash(/dev/null)",
      "Bash(true)",
      "Bash(false)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:huggingface.co)",
      "WebFetch(domain:langfuse.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "WebFetch(domain:docs.langflow.org)",
      "WebFetch(domain:reactflow.dev)",
      "WebFetch(domain:neo4j.com)",
      "WebFetch(domain:developers.google.com)",
      "WebSearch",
      "Bash(claude config get:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(open http://localhost:*)",
      "Bash(open https://*)",
      "Bash(open test_frontend_markdown.html)",
      "Bash(say:*)",
      "Bash(afplay:*)",
      "Bash(osascript -e 'display notification:*')",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d llm_platform -c *SELECT*",
      "Read(//Users/kianwoonwong/.claude/**)",
      "Read(//Users/kianwoonwong/Downloads/MCP/**)",
      "Read(//Users/kianwoonwong/Downloads/MCP/**)",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d llm_platform -c \"\\dt\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d llm_platform -c \"\\d settings\")",
      "Bash(psql -c 'SELECT *;')",
      "Bash(PGPASSWORD=postgres psql:*)"
    ],
    "deny": [
      "Bash(chown:*)",
      "Bash(sed -i:*)",
      "Bash(perl -i:*)",
      "Bash(awk -i:*)",
      "Bash(git pull:*)",
      "Bash(git merge:*)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose restart:*)",
      "Bash(docker-compose build:*)",
      "Bash(docker-compose exec:*)",
      "Bash(docker build:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(docker run:*)",
      "Bash(docker kill:*)",
      "Bash(docker restart:*)",
      "Bash(docker cp:*)",
      "Bash(docker volume:*)",
      "Bash(npm install:*)",
      "Bash(pip install:*)",
      "Bash(yarn install:*)",
      "Bash(bash:*)",
      "Bash(sh:*)",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(killall:*)",
      "Bash(claude config set:*)",
      "Bash(sudo:*)",
      "Bash(osascript -e:*)",
      "Bash(osascript -f:*)",
      "Bash(rm /*)",
      "Bash(rm -rf /*)",
      "Bash(curl -X POST:*)",
      "Bash(curl -X PUT:*)",
      "Bash(curl -X DELETE:*)",
      "Bash(wget:*)"
    ],
    "ask": [
      "Bash(chmod:*)",
      "Bash(PGPASSWORD=postgres psql*-c*INSERT*)",
      "Bash(PGPASSWORD=postgres psql*-c*UPDATE*)",
      "Bash(PGPASSWORD=postgres psql*-c*DELETE*)",
      "Bash(PGPASSWORD=postgres psql*-c*DROP*)",
      "Bash(PGPASSWORD=postgres psql*-c*TRUNCATE*)",
      "Bash(PGPASSWORD=postgres psql*-c*ALTER*)",
      "Bash(rm ./src/*)",
      "Bash(rm ./*)",
      "Bash(rm ../*)",
      "Bash(git push:*)",
      "Bash(git commit:*)"
    ],
    "defaultMode": "acceptEdits"
  },
  "enableAllProjectMcpServers": false,
  "hooks": {
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "say 'Claude needs your input' && osascript -e 'display notification \"Claude waiting for response\" with title \"Claude Code\"'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "say 'Task completed' && osascript -e 'display notification \"Task completed\" with title \"Claude Code\" sound name \"Submarine\"'"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "say 'Subtask complete' "
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "say 'Agent starting task'"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "say 'Agent task complete'"
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Claude Code ready' && say 'Claude ready'"
          }
        ]
      }
    ]
  },
  "disableAllHooks": false,
  "outputStyle": "concise-audio-feedback"
}