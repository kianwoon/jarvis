{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(npm run build:*)",
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(lsof:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(Check if rehype-raw is installed)",
      "Bash(rg:*)",
      "Bash(timeout:*)",
      "Bash(redis-cli:*)",
      "Bash(chmod:*)",
      "Bash(docker logs:*)",
      "Bash(ls:*)",
      "Bash(docker exec:*)",
      "Bash(docker-compose restart:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(docker restart:*)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "Bash(node test_table_fix.js)",
      "Bash(node:*)",
      "Bash(./replace_function.sh:*)",
      "Bash(open test_frontend_markdown.html)",
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "Bash(POSTGRES_HOST=localhost REDIS_HOST=localhost python test_oauth_injection.py)",
      "Bash(docker inspect:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -l)",
      "Bash(docker-compose logs:*)",
      "Bash(touch:*)",
      "Bash(docker-compose build:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(Searches for hardcoded values in pipeline files)",
      "Bash(docker-compose exec:*)",
      "Bash(psql:*)",
      "WebFetch(domain:huggingface.co)",
      "Bash(docker cp:*)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:langfuse.com)",
      "WebFetch(domain:langfuse.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:github.com)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(git checkout:*)",
      "Bash(/dev/null)",
      "Bash(true)",
      "Bash(awk:*)",
      "Bash(cat:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(docker build:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(docker run:*)",
      "Bash(npx tsc:*)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "Bash(time curl:*)",
      "Bash(docker kill:*)",
      "WebFetch(domain:docs.langflow.org)",
      "Bash(gtimeout:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"ALTER TABLE automation_executions ADD COLUMN workflow_state JSON;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"\\d automation_executions\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT id, name, description, langflow_config FROM automation_workflows ORDER BY id DESC LIMIT 5;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"INSERT INTO automation_workflows (name, description, langflow_config, is_active, created_by) VALUES ('StateNode Test', 'Test workflow with just StateNode', '{\\\"nodes\\\": [{\\\"id\\\": \\\"start-1\\\", \\\"type\\\": \\\"start\\\", \\\"position\\\": {\\\"x\\\": 100, \\\"y\\\": 100}, \\\"data\\\": {\\\"type\\\": \\\"JarvisStartNode\\\", \\\"node\\\": {\\\"label\\\": \\\"Start\\\"}}}, {\\\"id\\\": \\\"statenode-1\\\", \\\"type\\\": \\\"statenode\\\", \\\"position\\\": {\\\"x\\\": 300, \\\"y\\\": 100}, \\\"data\\\": {\\\"type\\\": \\\"StateNode\\\", \\\"node\\\": {\\\"state_operation\\\": \\\"set\\\", \\\"state_keys\\\": [\\\"test_key\\\"], \\\"state_values\\\": {\\\"test_key\\\": \\\"test_value\\\"}, \\\"persistence\\\": true, \\\"checkpoint_name\\\": \\\"test_checkpoint\\\"}}}, {\\\"id\\\": \\\"end-1\\\", \\\"type\\\": \\\"end\\\", \\\"position\\\": {\\\"x\\\": 500, \\\"y\\\": 100}, \\\"data\\\": {\\\"type\\\": \\\"JarvisEndNode\\\", \\\"node\\\": {\\\"label\\\": \\\"End\\\"}}}], \\\"edges\\\": [{\\\"source\\\": \\\"start-1\\\", \\\"target\\\": \\\"statenode-1\\\", \\\"id\\\": \\\"edge-1\\\"}, {\\\"source\\\": \\\"statenode-1\\\", \\\"target\\\": \\\"end-1\\\", \\\"id\\\": \\\"edge-2\\\"}], \\\"version\\\": \\\"1.0\\\"}', true, 'test') RETURNING id;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT id, name FROM automation_workflows ORDER BY id;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT json_array_length(langflow_config->'nodes') as node_count FROM automation_workflows WHERE id = 8;\")",
      "WebFetch(domain:reactflow.dev)",
      "Bash(echo:*)",
      "Bash(git restore:*)",
      "Bash(perl:*)",
      "Bash(npm ls:*)",
      "Bash(npm outdated)",
      "Bash(claude config set installMethod npm-global)",
      "Bash(npm run lint)",
      "Bash(open http://localhost:3000/settings.html)",
      "Bash(npm run dev:*)",
      "Bash(log show:*)",
      "Bash(top:*)",
      "Bash(open http://localhost:5173/settings.html)",
      "Bash(open http://localhost:5173/test_kg_data_flow.html)",
      "Bash(open http://localhost:5173/debug_kg_data_flow.html)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"UPDATE settings SET settings = ''{\n  \"\"model_config\"\": {\n    \"\"model\"\": \"\"qwen3:30b-a3b-instruct-2507-q4_K_M\"\",\n    \"\"temperature\"\": 0.1,\n    \"\"repeat_penalty\"\": 1.1,\n    \"\"system_prompt\"\": \"\"You are an expert knowledge graph extraction system. Extract entities and relationships from the given text with high precision.\"\",\n    \"\"max_tokens\"\": 4096,\n    \"\"context_length\"\": 32768,\n    \"\"model_server\"\": \"\"http://localhost:11434\"\"\n  },\n  \"\"extraction_settings\"\": {\n    \"\"max_entities_per_chunk\"\": 50,\n    \"\"enable_coreference_resolution\"\": true,\n    \"\"entity_types\"\": [\"\"PERSON\"\", \"\"ORGANIZATION\"\", \"\"LOCATION\"\", \"\"EVENT\"\", \"\"TECHNOLOGY\"\", \"\"CONCEPT\"\"],\n    \"\"relationship_types\"\": [\"\"works_for\"\", \"\"located_in\"\", \"\"part_of\"\", \"\"related_to\"\", \"\"uses\"\"]\n  },\n  \"\"neo4j\"\": {\n    \"\"enabled\"\": true,\n    \"\"host\"\": \"\"localhost\"\",\n    \"\"port\"\": 7687,\n    \"\"http_port\"\": 7474,\n    \"\"database\"\": \"\"neo4j\"\",\n    \"\"username\"\": \"\"neo4j\"\",\n    \"\"password\"\": \"\"jarvis_neo4j_password\"\",\n    \"\"uri\"\": \"\"bolt://localhost:7687\"\"\n  },\n  \"\"anti_silo\"\": {\n    \"\"enabled\"\": true,\n    \"\"similarity_threshold\"\": 0.5,\n    \"\"cross_document_linking\"\": true,\n    \"\"max_relationships_per_entity\"\": 100\n  }\n}'' WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"UPDATE settings SET settings = jsonb_set(settings, ''{knowledge_graph}'', ''{\n  \"\"anti_silo_mode\"\": \"\"enhanced\"\",\n  \"\"entity_discovery\"\": {\n    \"\"enabled\"\": true,\n    \"\"confidence_threshold\"\": 0.75,\n    \"\"auto_linking\"\": true,\n    \"\"relationship_boost\"\": true\n  },\n  \"\"relationship_discovery\"\": {\n    \"\"enabled\"\": true,\n    \"\"confidence_threshold\"\": 0.7,\n    \"\"cross_document\"\": true,\n    \"\"semantic_linking\"\": true\n  }\n}'') WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings->''model_config''->>''model'' as current_model FROM settings WHERE category = ''knowledge_graph''\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings->''model_config''->>''model'' as model, settings->''model_config''->>''max_tokens'' as max_tokens, settings->''model_config''->>''temperature'' as temperature, settings->''model_config''->>''repeat_penalty'' as repeat_penalty FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, jsonb_pretty(settings) FROM settings WHERE category IN (''knowledge_graph'', ''llm'') ORDER BY category;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /tmp/add_two_step_prompts.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /tmp/improved_two_step_prompts.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"\nMATCH (n)\nWHERE NOT (n)--()\nRETURN n.name as isolated_node, n.type as type, labels(n)[0] as label\nORDER BY n.name\nLIMIT 20\n\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_pretty(settings->''extraction'') FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(docker volume:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_pretty(settings->''extraction'') FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_pretty(settings->''prompts'') FROM settings WHERE category = ''knowledge_graph''\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings->''model_config''->>''model_server'' as server FROM settings WHERE category = ''knowledge_graph''\")",
      "WebFetch(domain:neo4j.com)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings->''extraction''->>''enable_anti_silo'' as anti_silo, settings->''extraction''->>''enable_cooccurrence_analysis'' as cooccurrence, settings->''extraction''->>''enable_multi_chunk_relationships'' as multi_chunk, settings->''extraction''->>''min_relationship_confidence'' as min_rel_conf, settings->>''max_relationships_per_chunk'' as max_rels_chunk FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /tmp/restore_two_step_prompts.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_pretty(settings->''extraction'') FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /tmp/complete_kg_restore.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_pretty(settings->''extraction'') FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /Users/kianwoonwong/Downloads/jarvis/fix_system_prompt.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -f /Users/kianwoonwong/Downloads/jarvis/restore_clean_system_prompt.sql)",
      "Bash(pkill:*)",
      "Bash(pip install:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"\\dt\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT * FROM collection_registry ORDER BY created_at DESC LIMIT 10;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT * FROM collection_statistics ORDER BY last_updated DESC LIMIT 10;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, jsonb_pretty(settings) FROM settings WHERE category LIKE ''%embed%'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, settings->''embedding'' as embedding_settings FROM settings WHERE settings->''embedding'' IS NOT NULL;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT COUNT(*) as document_count FROM knowledge_graph_documents;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, settings->embedding as embedding_settings FROM settings WHERE settings->embedding IS NOT NULL;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, jsonb_pretty(settings) FROM settings WHERE category LIKE ''%embed%'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"\\d automation_workflows\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT collection_name, collection_type, description FROM collection_registry ORDER BY collection_type, collection_name;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, settings FROM settings WHERE category = ''storage'';\" -t)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT * FROM knowledge_graph_settings WHERE setting_key IN (''similarity_threshold'', ''embedding_service_url'', ''search_threshold'', ''retrieval_threshold'') ORDER BY setting_key;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"\\d settings\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, settings FROM settings ORDER BY category;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT category, jsonb_pretty(settings) FROM settings WHERE category IN (''rag'', ''knowledge_graph'');\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings->''embedding_service_url'', settings->''similarity_threshold'', settings->''search_threshold'' FROM settings WHERE category = ''rag'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT settings FROM settings WHERE category = ''''rag'''';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT jsonb_extract_path_text(settings, ''milvus'', ''host'') as milvus_host, jsonb_extract_path_text(settings, ''milvus'', ''port'') as milvus_port FROM settings WHERE category = ''knowledge_graph'';\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT id, name, description FROM automation_workflows WHERE id = 39;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d llm_platform -c \"SELECT langflow_config FROM automation_workflows WHERE id = 39;\" -t)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}